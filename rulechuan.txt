# 🚀 KHOAUGMENT POS - MASTER SETUP FILE
# 100% Cloudflare Free Tier Deployment (D1 + R2 + Workers + Pages)
# Copy toàn bộ file này, sau đó split theo hướng dẫn bên dưới

# ===================================================================
# 📁 FILE: .cursorrules (Root directory)
# ===================================================================

# KhoAugment POS System - Cloudflare Optimized Cursor Rules

## 🎯 PROJECT CONTEXT
You are working on KhoAugment, a comprehensive Point of Sale (POS) system built with Cloudflare's free tier:
- Frontend: React 18 + Vite + Ant Design + TypeScript (deployed to Cloudflare Pages)
- Backend: Cloudflare Workers + Hono.js framework
- Database: Cloudflare D1 (SQLite)
- Storage: Cloudflare R2 (Object Storage)
- CDN: Cloudflare CDN with edge caching
- Analytics: Cloudflare Web Analytics
- Security: Cloudflare WAF + Bot Protection

## 🚫 ABSOLUTE PROHIBITIONS
- NEVER create mock data, demo data, or placeholder content
- NEVER use Node.js specific APIs in Workers (use Web APIs only)
- NEVER exceed Cloudflare free tier limits (100k requests/day, 10GB storage)
- NEVER use local filesystem storage (use R2 instead)
- NEVER create long-running processes (30-second Workers limit)
- NEVER use heavy computations that exceed CPU limits
- NEVER ignore edge computing constraints
- NEVER use non-SQLite SQL syntax for D1

## ✅ CLOUDFLARE REQUIREMENTS

### Workers Backend Standards
```javascript
import { Hono } from 'hono';
import { cors } from 'hono/cors';
import { jwt } from 'hono/jwt';

const app = new Hono();

// Middleware
app.use('*', cors());
app.use('/api/*', jwt({ secret: 'your-secret' }));

// Environment binding types
interface Env {
  DB: D1Database;
  BUCKET: R2Bucket;
  JWT_SECRET: string;
  API_KEY: string;
}

// API endpoint with proper error handling
app.get('/api/products', async (c) => {
  try {
    const { results } = await c.env.DB.prepare(
      'SELECT * FROM products WHERE active = 1'
    ).all();
    
    return c.json({ success: true, data: results });
  } catch (error) {
    return c.json({ success: false, error: error.message }, 500);
  }
});

export default app;
```

### D1 Database Patterns
```sql
-- Schema with proper indexing
CREATE TABLE IF NOT EXISTS products (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  price REAL NOT NULL,
  stock INTEGER DEFAULT 0,
  barcode TEXT UNIQUE,
  category_id INTEGER,
  image_url TEXT,
  active BOOLEAN DEFAULT 1,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_products_barcode ON products(barcode);
CREATE INDEX idx_products_category ON products(category_id);
CREATE INDEX idx_products_active ON products(active);
```

```javascript
// D1 query patterns
// Use prepared statements
const stmt = env.DB.prepare('SELECT * FROM products WHERE id = ?');
const product = await stmt.bind(productId).first();

// Batch operations for better performance
const stmts = products.map(p => 
  env.DB.prepare('INSERT INTO products (name, price) VALUES (?, ?)')
    .bind(p.name, p.price)
);
await env.DB.batch(stmts);

// Transactions for data consistency
const { success, error, meta } = await env.DB.batch([
  env.DB.prepare('UPDATE products SET stock = stock - ? WHERE id = ?').bind(quantity, productId),
  env.DB.prepare('INSERT INTO orders (product_id, quantity) VALUES (?, ?)').bind(productId, quantity)
]);
```

### R2 Storage Patterns
```javascript
// Upload file to R2
async function uploadToR2(env: Env, key: string, file: File) {
  const object = await env.BUCKET.put(key, file.stream(), {
    httpMetadata: {
      contentType: file.type,
      cacheControl: 'max-age=31536000', // 1 year
    },
    customMetadata: {
      uploadedBy: 'user-123',
      originalName: file.name,
    }
  });
  
  return `https://r2.khoaugment.com/${key}`;
}

// Generate presigned URL for direct uploads
async function getPresignedUrl(env: Env, key: string) {
  const url = await env.BUCKET.createPresignedUrl(key, {
    method: 'PUT',
    expiresIn: 3600, // 1 hour
  });
  
  return url;
}

// Optimize images before storing
async function storeOptimizedImage(env: Env, image: File) {
  // Resize and compress image using Cloudflare Images or client-side
  const optimized = await optimizeImage(image);
  const key = `products/${Date.now()}-${image.name}`;
  
  return await uploadToR2(env, key, optimized);
}
```

### Frontend Cloudflare Pages Optimization
```javascript
// vite.config.js for Cloudflare Pages
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  build: {
    target: 'es2020', // Modern browsers for edge
    minify: 'terser',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          antd: ['antd'],
          charts: ['recharts']
        }
      }
    }
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:8787', // Wrangler dev server
        changeOrigin: true
      }
    }
  }
});
```

## 🗄️ DATABASE ARCHITECTURE

### Core Tables Schema
```sql
-- Users with role-based access
CREATE TABLE users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  role TEXT CHECK(role IN ('admin', 'cashier', 'staff')) NOT NULL,
  full_name TEXT,
  phone TEXT,
  active BOOLEAN DEFAULT 1,
  last_login DATETIME,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Products with inventory tracking
CREATE TABLE products (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  description TEXT,
  price REAL NOT NULL CHECK(price >= 0),
  cost_price REAL CHECK(cost_price >= 0),
  stock INTEGER DEFAULT 0 CHECK(stock >= 0),
  min_stock INTEGER DEFAULT 5,
  barcode TEXT UNIQUE,
  category_id INTEGER,
  image_url TEXT,
  active BOOLEAN DEFAULT 1,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (category_id) REFERENCES categories(id)
);

-- Orders with complete audit trail
CREATE TABLE orders (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  order_number TEXT UNIQUE NOT NULL,
  user_id INTEGER NOT NULL,
  customer_id INTEGER,
  subtotal REAL NOT NULL CHECK(subtotal >= 0),
  tax_amount REAL DEFAULT 0 CHECK(tax_amount >= 0),
  discount_amount REAL DEFAULT 0 CHECK(discount_amount >= 0),
  total_amount REAL NOT NULL CHECK(total_amount >= 0),
  payment_method TEXT CHECK(payment_method IN ('cash', 'card', 'vnpay', 'momo', 'zalopay')),
  status TEXT CHECK(status IN ('pending', 'completed', 'cancelled', 'refunded')) DEFAULT 'pending',
  notes TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  completed_at DATETIME,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (customer_id) REFERENCES customers(id)
);

-- Order items with detailed tracking
CREATE TABLE order_items (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  order_id INTEGER NOT NULL,
  product_id INTEGER NOT NULL,
  quantity INTEGER NOT NULL CHECK(quantity > 0),
  unit_price REAL NOT NULL CHECK(unit_price >= 0),
  total_price REAL NOT NULL CHECK(total_price >= 0),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
  FOREIGN KEY (product_id) REFERENCES products(id)
);

-- Inventory movements for audit
CREATE TABLE inventory_movements (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  product_id INTEGER NOT NULL,
  movement_type TEXT CHECK(movement_type IN ('sale', 'purchase', 'adjustment', 'return')) NOT NULL,
  quantity_change INTEGER NOT NULL,
  quantity_before INTEGER NOT NULL,
  quantity_after INTEGER NOT NULL,
  reference_id INTEGER, -- order_id or adjustment_id
  reference_type TEXT, -- 'order', 'adjustment', etc.
  notes TEXT,
  user_id INTEGER,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (product_id) REFERENCES products(id),
  FOREIGN KEY (user_id) REFERENCES users(id)
);
```

## 🔧 API PATTERNS

### Authentication Middleware
```javascript
import { verify } from 'hono/jwt';

async function authMiddleware(c, next) {
  try {
    const authHeader = c.req.header('Authorization');
    if (!authHeader?.startsWith('Bearer ')) {
      return c.json({ success: false, error: 'Unauthorized' }, 401);
    }
    
    const token = authHeader.substring(7);
    const payload = await verify(token, c.env.JWT_SECRET);
    
    // Verify session in D1
    const session = await c.env.DB.prepare(
      'SELECT users.* FROM sessions JOIN users ON sessions.user_id = users.id WHERE sessions.id = ? AND sessions.expires_at > datetime("now")'
    ).bind(payload.sessionId).first();
    
    if (!session) {
      return c.json({ success: false, error: 'Session expired' }, 401);
    }
    
    c.set('user', session);
    await next();
  } catch (error) {
    return c.json({ success: false, error: 'Invalid token' }, 401);
  }
}
```

### Rate Limiting with KV
```javascript
async function rateLimitMiddleware(c, next) {
  const ip = c.req.header('CF-Connecting-IP') || 'unknown';
  const key = `rate_limit:${ip}`;
  
  try {
    const current = await c.env.KV.get(key);
    const requests = current ? parseInt(current) : 0;
    
    if (requests >= 100) { // 100 requests per hour
      return c.json({ success: false, error: 'Rate limit exceeded' }, 429);
    }
    
    await c.env.KV.put(key, (requests + 1).toString(), { expirationTtl: 3600 });
    await next();
  } catch (error) {
    // If KV fails, allow the request to continue
    await next();
  }
}
```

## 📱 PWA IMPLEMENTATION

### Service Worker for Offline Support
```javascript
// sw.js
const CACHE_NAME = 'khoaugment-v1';
const STATIC_CACHE = [
  '/',
  '/static/js/bundle.js',
  '/static/css/main.css',
  '/manifest.json'
];

// Install event
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(STATIC_CACHE))
  );
});

// Fetch event with cache-first strategy
self.addEventListener('fetch', event => {
  if (event.request.url.includes('/api/')) {
    // Network first for API calls
    event.respondWith(
      fetch(event.request)
        .then(response => {
          if (response.ok) {
            const responseClone = response.clone();
            caches.open(CACHE_NAME)
              .then(cache => cache.put(event.request, responseClone));
          }
          return response;
        })
        .catch(() => caches.match(event.request))
    );
  } else {
    // Cache first for static assets
    event.respondWith(
      caches.match(event.request)
        .then(response => response || fetch(event.request))
    );
  }
});

// Background sync for offline orders
self.addEventListener('sync', event => {
  if (event.tag === 'background-sync-orders') {
    event.waitUntil(syncOfflineOrders());
  }
});
```

Remember: 
- Always stay within Cloudflare free tier limits
- Use D1 for relational data, R2 for files
- Optimize for edge computing performance
- Implement proper caching strategies
- Monitor usage and costs regularly
- Use Cloudflare Analytics for insights

# ===================================================================
# 📁 FILE: .vscode/settings.json
# ===================================================================

{
  "// =================================================================": "",
  "// KHOAUGMENT POS - WORKSPACE SETTINGS": "",
  "// Cloudflare optimized development environment": "",
  "// =================================================================": "",
  
  "// === CURSOR AI CONFIGURATION ===": "",
  "cursor.rules": [
    "You are working on KhoAugment POS - a Vietnamese point of sale system",
    "Use Cloudflare Workers + D1 + R2 + Pages (free tier only)",
    "Frontend: React + Vite + Ant Design + TypeScript",
    "Backend: Hono.js framework on Cloudflare Workers",
    "Database: Cloudflare D1 (SQLite syntax only)",
    "Storage: Cloudflare R2 for files and images",
    "NEVER use mock data - always real API integration",
    "Stay within free tier limits: 100k requests/day, 30s CPU time",
    "Use proper TypeScript types for all components",
    "Implement role-based access control (admin, cashier, staff)",
    "Follow mobile-first responsive design",
    "Optimize for Vietnamese market (VND currency, Vietnamese language)"
  ],
  
  "// === FILE ASSOCIATIONS ===": "",
  "files.associations": {
    "*.jsx": "javascriptreact",
    "*.tsx": "typescriptreact",
    "wrangler.toml": "toml",
    "*.sql": "sql",
    ".cursorrules": "plaintext",
    ".env.*": "dotenv"
  },
  
  "// === TYPESCRIPT SETTINGS ===": "",
  "typescript.preferences.includePackageJsonAutoImports": "on",
  "typescript.suggest.autoImports": true,
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.preferences.importModuleSpecifier": "relative",
  "typescript.inlayHints.parameterNames.enabled": "all",
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  
  "// === JAVASCRIPT SETTINGS ===": "",
  "javascript.suggest.autoImports": true,
  "javascript.updateImportsOnFileMove.enabled": "always",
  "javascript.preferences.importModuleSpecifier": "relative",
  
  "// === EDITOR SETTINGS ===": "",
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
    "source.organizeImports": true,
    "source.removeUnusedImports": true
  },
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "editor.detectIndentation": false,
  "editor.wordWrap": "on",
  "editor.minimap.enabled": true,
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.bracketPairs": true,
  "editor.suggestSelection": "first",
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": true
  },
  
  "// === ESLINT CONFIGURATION ===": "",
  "eslint.enable": true,
  "eslint.validate": [
    "javascript",
    "javascriptreact", 
    "typescript",
    "typescriptreact"
  ],
  "eslint.workingDirectories": ["frontend", "backend"],
  
  "// === EMMET SETTINGS ===": "",
  "emmet.includeLanguages": {
    "javascript": "javascriptreact",
    "typescript": "typescriptreact"
  },
  "emmet.triggerExpansionOnTab": true,
  
  "// === FILE EXPLORER ===": "",
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.patterns": {
    "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, .npmrc",
    "wrangler.toml": ".wrangler/**, wrangler.*.toml",
    "vite.config.*": "vite.*.config.*, *.config.js, *.config.ts",
    "tsconfig.json": "tsconfig.*.json",
    "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
    "*.jsx": "${capture}.test.jsx, ${capture}.stories.jsx",
    "*.ts": "${capture}.js, ${capture}.d.ts.map, ${capture}.d.ts",
    "*.tsx": "${capture}.test.tsx, ${capture}.stories.tsx",
    "*.sql": "*.sql.bak, migrations/**",
    ".env": ".env.*, .envrc, env.d.ts",
    ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
    "README.md": "AUTHORS, BACKERS.md, CHANGELOG*, CONTRIBUTING.md, COPYING, CREDITS, Changelog*, INSTALL.md, LICENSE*, MAINTAINERS, Makefile, SPONSORS.md, readme*"
  },
  
  "// === SEARCH SETTINGS ===": "",
  "search.exclude": {
    "**/node_modules": true,
    "**/dist": true,
    "**/build": true,
    "**/.git": true,
    "**/.wrangler": true,
    "**/coverage": true,
    "**/.nyc_output": true,
    "**/logs": true,
    "**/*.log": true
  },
  "files.watcherExclude": {
    "**/node_modules/**": true,
    "**/.wrangler/**": true,
    "**/dist/**": true,
    "**/build/**": true
  },
  
  "// === TERMINAL SETTINGS ===": "",
  "terminal.integrated.defaultProfile.windows": "Git Bash",
  "terminal.integrated.defaultProfile.osx": "zsh", 
  "terminal.integrated.defaultProfile.linux": "bash",
  "terminal.integrated.fontSize": 14,
  "terminal.integrated.fontFamily": "Fira Code, Consolas, monospace",
  
  "// === GIT SETTINGS ===": "",
  "git.enableSmartCommit": true,
  "git.confirmSync": false,
  "git.autofetch": true,
  "git.enableCommitSigning": false,
  "git.defaultCloneDirectory": "./projects",
  
  "// === CSS/SCSS SETTINGS ===": "",
  "css.validate": true,
  "scss.validate": true,
  "css.lint.unknownAtRules": "ignore",
  
  "// === TAILWIND CSS ===": "",
  "tailwindCSS.includeLanguages": {
    "typescript": "typescript",
    "typescriptreact": "typescriptreact"
  },
  "tailwindCSS.experimental.classRegex": [
    ["cva\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
    ["cx\\(([^)]*)\\)", "(?:'|\"|`)([^']*)(?:'|\"|`)"]
  ],
  
  "// === CLOUDFLARE SPECIFIC ===": "",
  "cloudflare.wrangler.enabled": true,
  "cloudflare.wrangler.autoStart": false,
  
  "// === SQL TOOLS (for D1) ===": "",
  "sqltools.connections": [
    {
      "name": "D1 Local Database",
      "driver": "SQLite",
      "database": ".wrangler/state/v3/d1/miniflare-D1DatabaseObject/khoaugment-db.sqlite",
      "group": "Cloudflare D1"
    }
  ],
  "sqltools.useNodeRuntime": true,
  
  "// === PERFORMANCE ===": "",
  "typescript.preferences.useLabelDetailsInCompletionEntries": true,
  "typescript.suggest.includeCompletionsForModuleExports": true,
  "editor.unicodeHighlight.nonBasicASCII": false,
  
  "// === DEBUGGING ===": "",
  "debug.allowBreakpointsEverywhere": true,
  "debug.showBreakpointsInOverviewRuler": true,
  "debug.openDebug": "openOnDebugBreak",
  
  "// === CODE LENS ===": "",
  "editor.codeLens": true,
  "javascript.referencesCodeLens.enabled": true,
  "typescript.referencesCodeLens.enabled": true,
  
  "// === SECURITY ===": "",
  "security.workspace.trust.untrustedFiles": "open",
  "security.workspace.trust.banner": "never",
  
  "// === WORKSPACE SPECIFIC ===": "",
  "workbench.startupEditor": "readme",
  "workbench.colorTheme": "Default Dark+",
  "workbench.iconTheme": "vs-seti",
  "workbench.tree.indent": 20,
  "workbench.editor.enablePreview": false
}

# ===================================================================
# 📁 FILE: .vscode/extensions.json
# ===================================================================

{
  "recommendations": [
    // === ESSENTIAL ===
    "esbenp.prettier-vscode",
    "dbaeumer.vscode-eslint",
    "ms-vscode.vscode-typescript-next",
    "bradlc.vscode-tailwindcss",
    
    // === CLOUDFLARE ===
    "cloudflare.vscode-wrangler",
    "mtxr.sqltools",
    "mtxr.sqltools-driver-sqlite",
    "tamasfe.even-better-toml",
    
    // === REACT & WEB ===
    "formulahendry.auto-rename-tag",
    "christian-kohler.npm-intellisense",
    "ms-vscode.vscode-json",
    "bradlc.vscode-tailwindcss",
    
    // === TESTING ===
    "ms-playwright.playwright",
    "orta.vscode-jest",
    
    // === UTILITIES ===
    "ms-vscode.vscode-css-peek",
    "zignd.html-css-class-completion",
    "streetsidesoftware.code-spell-checker",
    "gruntfuggly.todo-tree",
    "aaron-bond.better-comments",
    
    // === API DEVELOPMENT ===
    "rangav.vscode-thunder-client",
    "humao.rest-client",
    
    // === GIT ===
    "eamodio.gitlens",
    "mhutchie.git-graph"
  ],
  "unwantedRecommendations": [
    "ms-vscode.vscode-typescript",
    "hookyqr.beautify"
  ]
}

# ===================================================================
# 📁 FILE: .vscode/tasks.json
# ===================================================================

{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "🚀 Start All Services",
      "dependsOrder": "parallel",
      "dependsOn": ["Frontend Dev", "Backend Dev"]
    },
    {
      "label": "Frontend Dev",
      "type": "shell",
      "command": "npm",
      "args": ["run", "dev"],
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "problemMatcher": []
    },
    {
      "label": "Backend Dev",
      "type": "shell", 
      "command": "wrangler",
      "args": ["dev", "--port", "8787"],
      "options": {
        "cwd": "${workspaceFolder}/backend"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    },
    {
      "label": "🗄️ D1 Migrations Apply",
      "type": "shell",
      "command": "wrangler",
      "args": ["d1", "migrations", "apply", "khoaugment-db", "--local"],
      "options": {
        "cwd": "${workspaceFolder}/backend"
      },
      "group": "test"
    },
    {
      "label": "🗄️ D1 Execute Query",
      "type": "shell",
      "command": "wrangler",
      "args": ["d1", "execute", "khoaugment-db", "--local", "--command=SELECT * FROM users LIMIT 5;"],
      "options": {
        "cwd": "${workspaceFolder}/backend"
      },
      "group": "test"
    },
    {
      "label": "📦 Deploy Frontend",
      "type": "shell",
      "command": "npm",
      "args": ["run", "build"],
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": "build",
      "dependsOn": "Build Frontend"
    },
    {
      "label": "⚡ Deploy Backend",
      "type": "shell",
      "command": "wrangler",
      "args": ["deploy"],
      "options": {
        "cwd": "${workspaceFolder}/backend"
      },
      "group": "build"
    },
    {
      "label": "🧪 Run Tests",
      "type": "shell",
      "command": "npm",
      "args": ["run", "test"],
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": "test"
    },
    {
      "label": "🎭 E2E Tests",
      "type": "shell",
      "command": "npx",
      "args": ["playwright", "test"],
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": "test"
    }
  ]
}

# ===================================================================
# 📁 FILE: package.json (Root)
# ===================================================================

{
  "name": "khoaugment-pos",
  "version": "1.0.0",
  "description": "Point of Sale system for Vietnamese market - 100% Cloudflare deployment",
  "type": "module",
  "scripts": {
    "dev": "concurrently \"npm run dev:frontend\" \"npm run dev:backend\"",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && wrangler dev",
    "build": "npm run build:frontend && npm run build:backend",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && wrangler deploy --dry-run",
    "deploy": "npm run deploy:backend && npm run deploy:frontend",
    "deploy:frontend": "cd frontend && npm run build && wrangler pages deploy dist --project-name=khoaugment-frontend",
    "deploy:backend": "cd backend && wrangler deploy",
    "test": "npm run test:frontend && npm run test:backend",
    "test:frontend": "cd frontend && npm run test",
    "test:backend": "cd backend && npm run test",
    "test:e2e": "cd frontend && npx playwright test",
    "db:migrate": "cd backend && wrangler d1 migrations apply khoaugment-db --local",
    "db:migrate:prod": "cd backend && wrangler d1 migrations apply khoaugment-db",
    "db:seed": "cd backend && wrangler d1 execute khoaugment-db --local --file=seed.sql",
    "db:seed:prod": "cd backend && wrangler d1 execute khoaugment-db --file=seed.sql",
    "db:reset": "cd backend && npm run db:reset",
    "lint": "cd frontend && npm run lint && cd ../backend && npm run lint",
    "format": "cd frontend && npm run format && cd ../backend && npm run format",
    "install:all": "npm install && cd frontend && npm install && cd ../backend && npm install",
    "clean": "rm -rf node_modules frontend/node_modules backend/node_modules frontend/dist backend/dist .wrangler",
    "logs:workers": "cd backend && wrangler tail",
    "logs:pages": "wrangler pages deployment list khoaugment-frontend",
    "r2:list": "wrangler r2 object list khoaugment-assets",
    "r2:upload": "wrangler r2 object put khoaugment-assets",
    "d1:console": "cd backend && wrangler d1 execute khoaugment-db --local"
  },
  "workspaces": [
    "frontend",
    "backend",
    "shared"
  ],
  "devDependencies": {
    "concurrently": "^8.2.0",
    "@types/node": "^20.0.0"
  },
  "keywords": ["pos", "point-of-sale", "vietnam", "cloudflare", "react", "d1", "r2", "workers"],
  "author": "KhoAugment Team",
  "license": "MIT",
  "engines": {
    "node": ">=18.0.0"
  }
}

# ===================================================================
# 📁 FILE: backend/wrangler.toml
# ===================================================================

name = "khoaugment-backend"
main = "src/index.js"
compatibility_date = "2024-07-01"
node_compat = false
minify = true
source_maps = true

[env.development]
name = "khoaugment-backend-dev"

[env.staging]
name = "khoaugment-backend-staging"

[env.production]
name = "khoaugment-backend-prod"

[[d1_databases]]
binding = "DB"
database_name = "khoaugment-db"
database_id = "YOUR_DATABASE_ID_HERE"
migrations_dir = "migrations"

[[r2_buckets]]
binding = "BUCKET"
bucket_name = "khoaugment-assets"
preview_bucket_name = "khoaugment-assets-preview"

[[kv_namespaces]]
binding = "CACHE"
id = "YOUR_KV_ID_HERE"
preview_id = "YOUR_KV_PREVIEW_ID_HERE"

[vars]
ENVIRONMENT = "development"
CORS_ORIGIN = "http://localhost:5173"
MAX_FILE_SIZE = "10485760"
RATE_LIMIT_REQUESTS = "100"
RATE_LIMIT_WINDOW = "3600"

# Use wrangler secret put for sensitive values:
# wrangler secret put JWT_SECRET
# wrangler secret put ENCRYPTION_KEY
# wrangler secret put VNPAY_SECRET_KEY
# wrangler secret put MOMO_SECRET_KEY
# wrangler secret put ZALOPAY_SECRET_KEY

[build]
command = "npm run build"
cwd = "."
watch_dir = "src"

[triggers]
crons = ["0 0 * * *"]

# ===================================================================
# 📁 FILE: backend/package.json
# ===================================================================

{
  "name": "khoaugment-backend",
  "version": "1.0.0",
  "description": "KhoAugment POS Backend on Cloudflare Workers",
  "main": "src/index.js",
  "type": "module",
  "scripts": {
    "dev": "wrangler dev --port 8787",
    "deploy": "wrangler deploy",
    "deploy:staging": "wrangler deploy --env staging",
    "deploy:production": "wrangler deploy --env production",
    "db:create": "wrangler d1 create khoaugment-db",
    "db:migrate": "wrangler d1 migrations apply khoaugment-db --local",
    "db:migrate:prod": "wrangler d1 migrations apply khoaugment-db",
    "db:seed": "wrangler d1 execute khoaugment-db --local --file=seed.sql",
    "db:seed:prod": "wrangler d1 execute khoaugment-db --file=seed.sql",
    "db:reset": "wrangler d1 execute khoaugment-db --local --command='DELETE FROM products; DELETE FROM users; DELETE FROM orders; DELETE FROM order_items;'",
    "db:console": "wrangler d1 execute khoaugment-db --local",
    "r2:create": "wrangler r2 bucket create khoaugment-assets",
    "r2:list": "wrangler r2 object list khoaugment-assets",
    "logs": "wrangler tail",
    "test": "jest",
    "lint": "eslint src/**/*.js",
    "format": "prettier --write src/**/*.js"
  },
  "dependencies": {
    "hono": "^4.0.0",
    "zod": "^3.22.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.0"
  },
  "devDependencies": {
    "wrangler": "^3.0.0",
    "@types/node": "^20.0.0",
    "@cloudflare/workers-types": "^4.0.0",
    "jest": "^29.0.0",
    "eslint": "^8.0.0",
    "prettier": "^3.0.0"
  }
}

# ===================================================================
# 📁 FILE: backend/src/index.js
# ===================================================================

import { Hono } from 'hono';
import { cors } from 'hono/cors';
import { logger } from 'hono/logger';
import { prettyJSON } from 'hono/pretty-json';
import { jwt } from 'hono/jwt';
import { z } from 'zod';

const app = new Hono();

// Middleware
app.use('*', cors({
  origin: ['http://localhost:5173', 'https://khoaugment.pages.dev'],
  allowMethods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowHeaders: ['Content-Type', 'Authorization'],
}));

app.use('*', logger());
app.use('*', prettyJSON());

// Rate limiting middleware
async function rateLimitMiddleware(c, next) {
  const ip = c.req.header('CF-Connecting-IP') || 'unknown';
  const key = `rate_limit:${ip}`;
  
  try {
    const current = await c.env.CACHE?.get(key);
    const requests = current ? parseInt(current) : 0;
    
    if (requests >= 100) { // 100 requests per hour
      return c.json({ success: false, error: 'Rate limit exceeded' }, 429);
    }
    
    await c.env.CACHE?.put(key, (requests + 1).toString(), { expirationTtl: 3600 });
    await next();
  } catch (error) {
    // If KV fails, allow the request to continue
    await next();
  }
}

// Authentication middleware
async function authMiddleware(c, next) {
  const authHeader = c.req.header('Authorization');
  if (!authHeader?.startsWith('Bearer ')) {
    return c.json({ success: false, error: 'Unauthorized' }, 401);
  }
  
  try {
    const token = authHeader.substring(7);
    // Verify JWT token here
    await next();
  } catch (error) {
    return c.json({ success: false, error: 'Invalid token' }, 401);
  }
}

// Health check
app.get('/', (c) => {
  return c.json({ 
    success: true, 
    message: 'KhoAugment API is running',
    timestamp: new Date().toISOString(),
    environment: c.env.ENVIRONMENT || 'development'
  });
});

// Apply rate limiting to API routes
app.use('/api/*', rateLimitMiddleware);

// Products endpoints
app.get('/api/products', async (c) => {
  try {
    const { results } = await c.env.DB.prepare(
      'SELECT * FROM products WHERE active = 1 ORDER BY name'
    ).all();
    
    return c.json({ success: true, data: results });
  } catch (error) {
    console.error('Error fetching products:', error);
    return c.json({ success: false, error: 'Internal server error' }, 500);
  }
});

app.post('/api/products', authMiddleware, async (c) => {
  try {
    const productSchema = z.object({
      name: z.string().min(1).max(255),
      description: z.string().optional(),
      price: z.number().positive(),
      cost_price: z.number().positive().optional(),
      stock: z.number().int().min(0),
      min_stock: z.number().int().min(0).default(5),
      barcode: z.string().optional(),
      category_id: z.number().int().positive().optional()
    });
    
    const body = await c.req.json();
    const validatedData = productSchema.parse(body);
    
    const result = await c.env.DB.prepare(
      'INSERT INTO products (name, description, price, cost_price, stock, min_stock, barcode, category_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?)'
    ).bind(
      validatedData.name,
      validatedData.description,
      validatedData.price,
      validatedData.cost_price,
      validatedData.stock,
      validatedData.min_stock,
      validatedData.barcode,
      validatedData.category_id
    ).run();
    
    return c.json({ 
      success: true, 
      data: { id: result.meta.last_row_id } 
    }, 201);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return c.json({ 
        success: false, 
        error: 'Validation failed', 
        details: error.errors 
      }, 400);
    }
    console.error('Error creating product:', error);
    return c.json({ success: false, error: 'Internal server error' }, 500);
  }
});

// Orders endpoints
app.get('/api/orders', authMiddleware, async (c) => {
  try {
    const { results } = await c.env.DB.prepare(`
      SELECT o.*, u.full_name as cashier_name
      FROM orders o
      LEFT JOIN users u ON o.user_id = u.id
      ORDER BY o.created_at DESC
      LIMIT 100
    `).all();
    
    return c.json({ success: true, data: results });
  } catch (error) {
    console.error('Error fetching orders:', error);
    return c.json({ success: false, error: 'Internal server error' }, 500);
  }
});

app.post('/api/orders', authMiddleware, async (c) => {
  try {
    const orderSchema = z.object({
      customer_id: z.number().int().positive().optional(),
      items: z.array(z.object({
        product_id: z.number().int().positive(),
        quantity: z.number().int().positive(),
        unit_price: z.number().positive()
      })),
      payment_method: z.enum(['cash', 'card', 'vnpay', 'momo', 'zalopay']),
      discount_amount: z.number().min(0).default(0),
      notes: z.string().optional()
    });
    
    const body = await c.req.json();
    const validatedData = orderSchema.parse(body);
    
    // Calculate totals
    const subtotal = validatedData.items.reduce((sum, item) => 
      sum + (item.quantity * item.unit_price), 0
    );
    const tax_amount = subtotal * 0.1; // 10% VAT
    const total_amount = subtotal + tax_amount - validatedData.discount_amount;
    
    // Generate order number
    const order_number = `ORD-${Date.now()}`;
    
    // Create order and order items in transaction
    const statements = [
      c.env.DB.prepare(
        'INSERT INTO orders (order_number, user_id, customer_id, subtotal, tax_amount, discount_amount, total_amount, payment_method, notes) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)'
      ).bind(
        order_number,
        1, // TODO: Get from auth context
        validatedData.customer_id,
        subtotal,
        tax_amount,
        validatedData.discount_amount,
        total_amount,
        validatedData.payment_method,
        validatedData.notes
      )
    ];
    
    // Add order items
    validatedData.items.forEach(item => {
      statements.push(
        c.env.DB.prepare(
          'INSERT INTO order_items (order_id, product_id, quantity, unit_price, total_price) VALUES (last_insert_rowid(), ?, ?, ?, ?)'
        ).bind(
          item.product_id,
          item.quantity,
          item.unit_price,
          item.quantity * item.unit_price
        )
      );
      
      // Update product stock
      statements.push(
        c.env.DB.prepare(
          'UPDATE products SET stock = stock - ? WHERE id = ?'
        ).bind(item.quantity, item.product_id)
      );
    });
    
    const result = await c.env.DB.batch(statements);
    
    if (!result.every(r => r.success)) {
      throw new Error('Transaction failed');
    }
    
    return c.json({ 
      success: true, 
      data: { 
        order_number,
        total_amount 
      } 
    }, 201);
  } catch (error) {
    if (error instanceof z.ZodError) {
      return c.json({ 
        success: false, 
        error: 'Validation failed', 
        details: error.errors 
      }, 400);
    }
    console.error('Error creating order:', error);
    return c.json({ success: false, error: 'Internal server error' }, 500);
  }
});

// File upload to R2
app.post('/api/upload', authMiddleware, async (c) => {
  try {
    const formData = await c.req.formData();
    const file = formData.get('file');
    
    if (!file) {
      return c.json({ success: false, error: 'No file provided' }, 400);
    }
    
    const key = `uploads/${Date.now()}-${file.name}`;
    
    await c.env.BUCKET.put(key, file.stream(), {
      httpMetadata: {
        contentType: file.type,
        cacheControl: 'max-age=31536000',
      },
      customMetadata: {
        originalName: file.name,
        uploadedAt: new Date().toISOString(),
      }
    });
    
    const url = `https://khoaugment-assets.r2.dev/${key}`;
    
    return c.json({ 
      success: true, 
      data: { url, key } 
    });
  } catch (error) {
    console.error('Error uploading file:', error);
    return c.json({ success: false, error: 'Upload failed' }, 500);
  }
});

// Cron job for daily cleanup
app.get('/api/cron/cleanup', async (c) => {
  try {
    // Clean up old sessions
    await c.env.DB.prepare(
      'DELETE FROM sessions WHERE expires_at < datetime("now")'
    ).run();
    
    // Clean up old logs
    await c.env.DB.prepare(
      'DELETE FROM activity_logs WHERE created_at < datetime("now", "-30 days")'
    ).run();
    
    return c.json({ success: true, message: 'Cleanup completed' });
  } catch (error) {
    console.error('Error in cleanup:', error);
    return c.json({ success: false, error: 'Cleanup failed' }, 500);
  }
});

export default app;

# ===================================================================
# 📁 FILE: backend/schema.sql
# ===================================================================

-- KhoAugment POS Database Schema for Cloudflare D1
-- SQLite compatible schema with proper indexing

-- Users table with role-based access
CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  role TEXT CHECK(role IN ('admin', 'cashier', 'staff')) NOT NULL,
  full_name TEXT NOT NULL,
  phone TEXT,
  avatar_url TEXT,
  active BOOLEAN DEFAULT 1,
  last_login DATETIME,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Categories for product organization
CREATE TABLE IF NOT EXISTS categories (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  description TEXT,
  image_url TEXT,
  active BOOLEAN DEFAULT 1,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Products with inventory tracking
CREATE TABLE IF NOT EXISTS products (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  description TEXT,
  price REAL NOT NULL CHECK(price >= 0),
  cost_price REAL CHECK(cost_price >= 0),
  stock INTEGER DEFAULT 0 CHECK(stock >= 0),
  min_stock INTEGER DEFAULT 5,
  barcode TEXT UNIQUE,
  category_id INTEGER,
  image_url TEXT,
  active BOOLEAN DEFAULT 1,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (category_id) REFERENCES categories(id)
);

-- Customers for loyalty and tracking
CREATE TABLE IF NOT EXISTS customers (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  email TEXT UNIQUE,
  phone TEXT,
  address TEXT,
  date_of_birth DATE,
  loyalty_points INTEGER DEFAULT 0,
  active BOOLEAN DEFAULT 1,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Orders with complete audit trail
CREATE TABLE IF NOT EXISTS orders (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  order_number TEXT UNIQUE NOT NULL,
  user_id INTEGER NOT NULL,
  customer_id INTEGER,
  subtotal REAL NOT NULL CHECK(subtotal >= 0),
  tax_amount REAL DEFAULT 0 CHECK(tax_amount >= 0),
  discount_amount REAL DEFAULT 0 CHECK(discount_amount >= 0),
  total_amount REAL NOT NULL CHECK(total_amount >= 0),
  payment_method TEXT CHECK(payment_method IN ('cash', 'card', 'vnpay', 'momo', 'zalopay')),
  payment_status TEXT CHECK(payment_status IN ('pending', 'completed', 'failed', 'refunded')) DEFAULT 'pending',
  status TEXT CHECK(status IN ('pending', 'completed', 'cancelled', 'refunded')) DEFAULT 'pending',
  notes TEXT,
  receipt_url TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  completed_at DATETIME,
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (customer_id) REFERENCES customers(id)
);

-- Order items with detailed tracking
CREATE TABLE IF NOT EXISTS order_items (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  order_id INTEGER NOT NULL,
  product_id INTEGER NOT NULL,
  quantity INTEGER NOT NULL CHECK(quantity > 0),
  unit_price REAL NOT NULL CHECK(unit_price >= 0),
  total_price REAL NOT NULL CHECK(total_price >= 0),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,
  FOREIGN KEY (product_id) REFERENCES products(id)
);

-- Inventory movements for audit
CREATE TABLE IF NOT EXISTS inventory_movements (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  product_id INTEGER NOT NULL,
  movement_type TEXT CHECK(movement_type IN ('sale', 'purchase', 'adjustment', 'return')) NOT NULL,
  quantity_change INTEGER NOT NULL,
  quantity_before INTEGER NOT NULL,
  quantity_after INTEGER NOT NULL,
  reference_id INTEGER,
  reference_type TEXT,
  notes TEXT,
  user_id INTEGER,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (product_id) REFERENCES products(id),
  FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Sessions for JWT token management
CREATE TABLE IF NOT EXISTS sessions (
  id TEXT PRIMARY KEY,
  user_id INTEGER NOT NULL,
  expires_at DATETIME NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- System settings
CREATE TABLE IF NOT EXISTS settings (
  key TEXT PRIMARY KEY,
  value TEXT NOT NULL,
  description TEXT,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Activity logs for audit
CREATE TABLE IF NOT EXISTS activity_logs (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER,
  action TEXT NOT NULL,
  entity_type TEXT,
  entity_id INTEGER,
  details TEXT,
  ip_address TEXT,
  user_agent TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Performance indexes
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_role ON users(role);
CREATE INDEX IF NOT EXISTS idx_users_active ON users(active);

CREATE INDEX IF NOT EXISTS idx_products_barcode ON products(barcode);
CREATE INDEX IF NOT EXISTS idx_products_category ON products(category_id);
CREATE INDEX IF NOT EXISTS idx_products_active ON products(active);
CREATE INDEX IF NOT EXISTS idx_products_stock ON products(stock);

CREATE INDEX IF NOT EXISTS idx_customers_email ON customers(email);
CREATE INDEX IF NOT EXISTS idx_customers_phone ON customers(phone);

CREATE INDEX IF NOT EXISTS idx_orders_user ON orders(user_id);
CREATE INDEX IF NOT EXISTS idx_orders_customer ON orders(customer_id);
CREATE INDEX IF NOT EXISTS idx_orders_status ON orders(status);
CREATE INDEX IF NOT EXISTS idx_orders_payment_status ON orders(payment_status);
CREATE INDEX IF NOT EXISTS idx_orders_created_at ON orders(created_at);
CREATE INDEX IF NOT EXISTS idx_orders_order_number ON orders(order_number);

CREATE INDEX IF NOT EXISTS idx_order_items_order ON order_items(order_id);
CREATE INDEX IF NOT EXISTS idx_order_items_product ON order_items(product_id);

CREATE INDEX IF NOT EXISTS idx_inventory_movements_product ON inventory_movements(product_id);
CREATE INDEX IF NOT EXISTS idx_inventory_movements_type ON inventory_movements(movement_type);
CREATE INDEX IF NOT EXISTS idx_inventory_movements_created_at ON inventory_movements(created_at);

CREATE INDEX IF NOT EXISTS idx_sessions_user ON sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_sessions_expires_at ON sessions(expires_at);

CREATE INDEX IF NOT EXISTS idx_activity_logs_user ON activity_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_activity_logs_action ON activity_logs(action);
CREATE INDEX IF NOT EXISTS idx_activity_logs_created_at ON activity_logs(created_at);

# ===================================================================
# 📁 FILE: backend/seed.sql
# ===================================================================

-- KhoAugment POS Seed Data
-- Insert default data for development and testing

-- Insert default admin user (password: admin123)
INSERT INTO users (email, password_hash, role, full_name, phone) VALUES 
('admin@khoaugment.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin', 'Quản trị viên', '0123456789'),
('cashier@khoaugment.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'cashier', 'Thu ngân', '0123456788'),
('staff@khoaugment.com', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'staff', 'Nhân viên', '0123456787');

-- Insert sample categories
INSERT INTO categories (name, description) VALUES 
('Đồ uống', 'Nước ngọt, trà, cà phê, nước suối'),
('Đồ ăn', 'Bánh kẹo, snack, đồ ăn vặt'),
('Văn phòng phẩm', 'Bút, giấy, dụng cụ học tập'),
('Điện tử', 'Phụ kiện điện thoại, tai nghe, cáp sạc'),
('Gia dụng', 'Đồ dùng gia đình, vệ sinh');

-- Insert sample products
INSERT INTO products (name, description, price, cost_price, stock, min_stock, barcode, category_id) VALUES 
-- Đồ uống
('Coca Cola 330ml', 'Nước ngọt có ga Coca Cola lon 330ml', 15000, 12000, 100, 10, '8934673123456', 1),
('Pepsi 330ml', 'Nước ngọt có ga Pepsi lon 330ml', 15000, 12000, 80, 10, '8934673123457', 1),
('Aquafina 500ml', 'Nước suối tinh khiết Aquafina 500ml', 8000, 6000, 200, 20, '8934673123458', 1),
('Trà Xanh 0 độ 450ml', 'Trà xanh không đường 450ml', 12000, 9000, 60, 10, '8934673123459', 1),
('Cà phê Highlands 235ml', 'Cà phê sữa đá Highlands lon 235ml', 25000, 20000, 40, 5, '8934673123460', 1),

-- Đồ ăn
('Bánh Oreo Original', 'Bánh quy kem Oreo vị nguyên bản', 25000, 20000, 50, 5, '8934673234567', 2),
('Snack Oishi Bắp rang', 'Snack bắp rang vị tự nhiên 42g', 8000, 6000, 120, 15, '8934673234568', 2),
('Kẹo Mentos Mint', 'Kẹo Mentos vị bạc hà', 15000, 12000, 80, 10, '8934673234569', 2),
('Bánh mì Sandwich', 'Bánh mì sandwich thịt nguội', 35000, 25000, 20, 5, '8934673234570', 2),
('Mì tôm Hảo Hảo', 'Mì tôm chua cay Hảo Hảo', 5000, 3500, 200, 30, '8934673234571', 2),

-- Văn phòng phẩm
('Bút bi xanh Thiên Long', 'Bút bi xanh TL-027', 5000, 3000, 200, 20, '8934673345678', 3),
('Tập 4 ô Campus', 'Tập viết 4 ô Campus 200 trang', 15000, 10000, 100, 10, '8934673345679', 3),
('Bút chì 2B', 'Bút chì 2B Thiên Long', 3000, 2000, 150, 20, '8934673345680', 3),
('Thước kẻ 30cm', 'Thước kẻ nhựa trong 30cm', 8000, 5000, 80, 10, '8934673345681', 3),
('Gôm tẩy trắng', 'Gôm tẩy trắng Thiên Long', 2000, 1500, 300, 50, '8934673345682', 3),

-- Điện tử
('Cáp sạc iPhone Lightning', 'Cáp sạc Lightning 1m chính hãng', 150000, 100000, 30, 5, '8934673456789', 4),
('Tai nghe có dây', 'Tai nghe có dây jack 3.5mm', 50000, 35000, 25, 5, '8934673456790', 4),
('Ốp lưng iPhone 14', 'Ốp lưng silicon iPhone 14', 80000, 50000, 40, 5, '8934673456791', 4),
('Pin dự phòng 10000mAh', 'Pin dự phòng Xiaomi 10000mAh', 350000, 250000, 15, 3, '8934673456792', 4),
('Kính cường lực iPhone', 'Kính cường lực iPhone 14 Pro', 100000, 70000, 20, 3, '8934673456793', 4),

-- Gia dụng
('Khăn giấy Tempo', 'Khăn giấy Tempo hộp 100 tờ', 25000, 18000, 60, 10, '8934673567890', 5),
('Nước rửa chén Sunlight', 'Nước rửa chén Sunlight 500ml', 35000, 25000, 40, 5, '8934673567891', 5),
('Túi rác đen 3 cuộn', 'Túi rác đen size M 3 cuộn', 30000, 20000, 50, 10, '8934673567892', 5),
('Giấy vệ sinh Paseo', 'Giấy vệ sinh Paseo 10 cuộn', 45000, 35000, 30, 5, '8934673567893', 5),
('Nước lau sàn Vim', 'Nước lau sàn Vim hương lavender 1L', 40000, 30000, 25, 5, '8934673567894', 5);

-- Insert sample customers
INSERT INTO customers (name, email, phone, address, loyalty_points) VALUES 
('Nguyễn Văn An', 'an@gmail.com', '0901234567', '123 Lê Lợi, Q1, TP.HCM', 150),
('Trần Thị Bình', 'binh@gmail.com', '0901234568', '456 Nguyễn Huệ, Q1, TP.HCM', 300),
('Lê Văn Cường', 'cuong@gmail.com', '0901234569', '789 Đồng Khởi, Q1, TP.HCM', 75),
('Phạm Thị Dung', 'dung@gmail.com', '0901234570', '321 Hai Bà Trưng, Q3, TP.HCM', 220),
('Hoàng Văn Em', 'em@gmail.com', '0901234571', '654 Cách Mạng Tháng 8, Q10, TP.HCM', 180);

-- Insert system settings
INSERT INTO settings (key, value, description) VALUES 
('tax_rate', '0.1', 'Thuế VAT (10%)'),
('currency', 'VND', 'Đơn vị tiền tệ'),
('business_name', 'KhoAugment POS', 'Tên cửa hàng'),
('business_address', '123 Nguyễn Du, Q1, TP.HCM', 'Địa chỉ cửa hàng'),
('business_phone', '028-1234-5678', 'Số điện thoại cửa hàng'),
('receipt_footer', 'Cảm ơn quý khách đã mua hàng!', 'Lời cảm ơn trên hóa đơn'),
('low_stock_threshold', '10', 'Ngưỡng cảnh báo hết hàng'),
('backup_frequency', '24', 'Tần suất sao lưu (giờ)');

-- Sample order for testing
INSERT INTO orders (order_number, user_id, customer_id, subtotal, tax_amount, discount_amount, total_amount, payment_method, status, notes) VALUES 
('ORD-1000001', 2, 1, 50000, 5000, 0, 55000, 'cash', 'completed', 'Khách hàng thân thiết');

-- Sample order items
INSERT INTO order_items (order_id, product_id, quantity, unit_price, total_price) VALUES 
(1, 1, 2, 15000, 30000),  -- 2 Coca Cola
(1, 6, 1, 25000, 25000);  -- 1 Bánh Oreo

-- Sample inventory movements
INSERT INTO inventory_movements (product_id, movement_type, quantity_change, quantity_before, quantity_after, reference_id, reference_type, user_id, notes) VALUES 
(1, 'sale', -2, 102, 100, 1, 'order', 2, 'Bán hàng'),
(6, 'sale', -1, 51, 50, 1, 'order', 2, 'Bán hàng');

# ===================================================================
# 📁 FILE: frontend/package.json
# ===================================================================

{
  "name": "khoaugment-frontend",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --port 5173",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint . --ext ts,tsx --fix",
    "preview": "vite preview",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage",
    "e2e": "playwright test",
    "e2e:ui": "playwright test --ui",
    "format": "prettier --write src/**/*.{ts,tsx,js,jsx,css,md}",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "antd": "^5.12.0",
    "@ant-design/icons": "^5.2.0",
    "axios": "^1.6.0",
    "recharts": "^2.8.0",
    "dayjs": "^1.11.0",
    "zustand": "^4.4.0",
    "react-query": "^3.39.0",
    "i18next": "^23.7.0",
    "react-i18next": "^13.5.0",
    "react-helmet-async": "^2.0.0",
    "zod": "^3.22.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.2.0",
    "eslint": "^8.45.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.0",
    "prettier": "^3.0.0",
    "typescript": "^5.0.2",
    "vite": "^5.0.0",
    "vite-plugin-pwa": "^0.17.0",
    "vitest": "^1.0.0",
    "@vitest/ui": "^1.0.0",
    "@vitest/coverage-c8": "^0.33.0",
    "@playwright/test": "^1.40.0",
    "workbox-webpack-plugin": "^7.0.0"
  }
}

# ===================================================================
# 📁 FILE: frontend/vite.config.ts
# ===================================================================

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import { VitePWA } from 'vite-plugin-pwa';
import path from 'path';

export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      workbox: {
        globPatterns: ['**/*.{js,css,html,ico,png,svg,webp,woff2}'],
        runtimeCaching: [
          {
            urlPattern: /^https:\/\/khoaugment-backend\..*\.workers\.dev\/api\/.*/,
            handler: 'NetworkFirst',
            options: {
              cacheName: 'api-cache',
              expiration: {
                maxEntries: 100,
                maxAgeSeconds: 60 * 60 * 24, // 24 hours
              },
              cacheableResponse: {
                statuses: [0, 200],
              },
            },
          },
          {
            urlPattern: /^https:\/\/.*\.r2\.dev\/.*/,
            handler: 'CacheFirst',
            options: {
              cacheName: 'images-cache',
              expiration: {
                maxEntries: 500,
                maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
              },
            },
          },
        ],
      },
      manifest: {
        name: 'KhoAugment POS',
        short_name: 'KhoAugment',
        description: 'Hệ thống bán hàng chuyên nghiệp cho thị trường Việt Nam',
        theme_color: '#1890ff',
        background_color: '#ffffff',
        display: 'standalone',
        orientation: 'portrait',
        scope: '/',
        start_url: '/',
        icons: [
          {
            src: '/pwa-192x192.png',
            sizes: '192x192',
            type: 'image/png'
          },
          {
            src: '/pwa-512x512.png',
            sizes: '512x512',
            type: 'image/png'
          },
          {
            src: '/pwa-512x512.png',
            sizes: '512x512',
            type: 'image/png',
            purpose: 'any maskable'
          }
        ],
        shortcuts: [
          {
            name: 'Bán hàng',
            short_name: 'POS',
            description: 'Mở màn hình bán hàng',
            url: '/pos',
            icons: [{ src: '/pos-icon.png', sizes: '96x96' }]
          },
          {
            name: 'Sản phẩm',
            short_name: 'Products',
            description: 'Quản lý sản phẩm',
            url: '/admin/products',
            icons: [{ src: '/products-icon.png', sizes: '96x96' }]
          }
        ]
      }
    })
  ],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@/components': path.resolve(__dirname, './src/components'),
      '@/pages': path.resolve(__dirname, './src/pages'),
      '@/services': path.resolve(__dirname, './src/services'),
      '@/utils': path.resolve(__dirname, './src/utils'),
      '@/types': path.resolve(__dirname, './src/types'),
      '@/hooks': path.resolve(__dirname, './src/hooks'),
      '@/assets': path.resolve(__dirname, './src/assets'),
    },
  },
  build: {
    target: 'es2020',
    minify: 'terser',
    sourcemap: true,
    rollupOptions: {
      output: {
        manualChunks: {
          'vendor-react': ['react', 'react-dom', 'react-router-dom'],
          'vendor-antd': ['antd', '@ant-design/icons'],
          'vendor-charts': ['recharts'],
          'vendor-utils': ['axios', 'dayjs', 'zustand', 'react-query'],
        },
      },
    },
    chunkSizeWarningLimit: 1000,
  },
  server: {
    host: '0.0.0.0',
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:8787',
        changeOrigin: true,
        secure: false,
      },
    },
  },
  preview: {
    host: '0.0.0.0',
    port: 4173,
  },
  define: {
    __APP_VERSION__: JSON.stringify(process.env.npm_package_version),
  },
});

# ===================================================================
# 📁 FILE: frontend/src/main.tsx
# ===================================================================

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { ConfigProvider } from 'antd';
import viVN from 'antd/locale/vi_VN';
import dayjs from 'dayjs';
import 'dayjs/locale/vi';
import { HelmetProvider } from 'react-helmet-async';
import App from './App';
import './index.css';

// Configure dayjs locale
dayjs.locale('vi');

// Ant Design theme configuration
const theme = {
  token: {
    colorPrimary: '#1890ff',
    colorSuccess: '#52c41a',
    colorWarning: '#faad14',
    colorError: '#ff4d4f',
    borderRadius: 6,
    fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif',
  },
  components: {
    Button: {
      borderRadius: 6,
    },
    Card: {
      borderRadius: 8,
    },
    Input: {
      borderRadius: 6,
    },
    Select: {
      borderRadius: 6,
    },
  },
};

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <HelmetProvider>
      <BrowserRouter>
        <ConfigProvider locale={viVN} theme={theme}>
          <App />
        </ConfigProvider>
      </BrowserRouter>
    </HelmetProvider>
  </React.StrictMode>
);

# ===================================================================
# 📁 FILE: frontend/src/App.tsx
# ===================================================================

import React, { Suspense } from 'react';
import { Routes, Route } from 'react-router-dom';
import { Spin } from 'antd';
import { Helmet } from 'react-helmet-async';
import { QueryClient, QueryClientProvider } from 'react-query';
import { useAuthStore } from './stores/authStore';
import ErrorBoundary from './components/ErrorBoundary';
import ProtectedRoute from './components/ProtectedRoute';

// Lazy load pages for better performance
const HomePage = React.lazy(() => import('./pages/HomePage'));
const LoginPage = React.lazy(() => import('./pages/LoginPage'));
const AdminDashboard = React.lazy(() => import('./pages/admin/Dashboard'));
const ProductsPage = React.lazy(() => import('./pages/admin/ProductsPage'));
const OrdersPage = React.lazy(() => import('./pages/admin/OrdersPage'));
const POSPage = React.lazy(() => import('./pages/pos/POSPage'));
const NotFoundPage = React.lazy(() => import('./pages/NotFoundPage'));

// Create QueryClient instance
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      retry: 2,
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000, // 10 minutes
    },
  },
});

const App: React.FC = () => {
  const { user, loading } = useAuthStore();

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Spin size="large" />
      </div>
    );
  }

  return (
    <QueryClientProvider client={queryClient}>
      <ErrorBoundary>
        <Helmet>
          <title>KhoAugment POS - Hệ thống bán hàng chuyên nghiệp</title>
          <meta name="description" content="Hệ thống bán hàng Point of Sale chuyên nghiệp cho thị trường Việt Nam" />
          <meta name="viewport" content="width=device-width, initial-scale=1.0" />
          <meta name="theme-color" content="#1890ff" />
        </Helmet>
        
        <Suspense 
          fallback={
            <div className="flex items-center justify-center min-h-screen">
              <Spin size="large" />
            </div>
          }
        >
          <Routes>
            {/* Public routes */}
            <Route path="/" element={<HomePage />} />
            <Route path="/login" element={<LoginPage />} />
            
            {/* Protected routes */}
            <Route 
              path="/admin" 
              element={
                <ProtectedRoute requiredRole="admin">
                  <AdminDashboard />
                </ProtectedRoute>
              } 
            />
            <Route 
              path="/admin/products" 
              element={
                <ProtectedRoute requiredRole="admin">
                  <ProductsPage />
                </ProtectedRoute>
              } 
            />
            <Route 
              path="/admin/orders" 
              element={
                <ProtectedRoute requiredRole="admin">
                  <OrdersPage />
                </ProtectedRoute>
              } 
            />
            <Route 
              path="/pos" 
              element={
                <ProtectedRoute requiredRole={['admin', 'cashier']}>
                  <POSPage />
                </ProtectedRoute>
              } 
            />
            
            {/* 404 route */}
            <Route path="*" element={<NotFoundPage />} />
          </Routes>
        </Suspense>
      </ErrorBoundary>
    </QueryClientProvider>
  );
};

export default App;

# ===================================================================
# 📁 FILE: frontend/src/services/api.ts
# ===================================================================

import axios, { AxiosResponse, AxiosError } from 'axios';
import { message } from 'antd';

// API configuration
const API_BASE_URL = import.meta.env.VITE_API_URL || 'https://khoaugment-backend.your-subdomain.workers.dev/api';

// Create axios instance
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000, // 30 seconds timeout
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor for authentication
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('auth_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
api.interceptors.response.use(
  (response: AxiosResponse) => {
    return response;
  },
  (error: AxiosError) => {
    if (error.response?.status === 401) {
      // Unauthorized - redirect to login
      localStorage.removeItem('auth_token');
      window.location.href = '/login';
    } else if (error.response?.status === 429) {
      message.error('Quá nhiều yêu cầu. Vui lòng thử lại sau.');
    } else if (error.response?.status >= 500) {
      message.error('Lỗi máy chủ. Vui lòng thử lại sau.');
    } else if (error.code === 'ECONNABORTED') {
      message.error('Yêu cầu bị timeout. Vui lòng thử lại.');
    } else {
      const errorMessage = error.response?.data?.error || 'Đã xảy ra lỗi không xác định';
      message.error(errorMessage);
    }
    return Promise.reject(error);
  }
);

// API response types
interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  details?: any;
}

// Products API
export const productsAPI = {
  getAll: async (): Promise<Product[]> => {
    const response = await api.get<ApiResponse<Product[]>>('/products');
    return response.data.data || [];
  },

  getById: async (id: number): Promise<Product> => {
    const response = await api.get<ApiResponse<Product>>(`/products/${id}`);
    if (!response.data.success || !response.data.data) {
      throw new Error('Không tìm thấy sản phẩm');
    }
    return response.data.data;
  },

  create: async (product: CreateProductRequest): Promise<{ id: number }> => {
    const response = await api.post<ApiResponse<{ id: number }>>('/products', product);
    if (!response.data.success) {
      throw new Error(response.data.error || 'Không thể tạo sản phẩm');
    }
    return response.data.data!;
  },

  update: async (id: number, product: UpdateProductRequest): Promise<void> => {
    const response = await api.put<ApiResponse>(`/products/${id}`, product);
    if (!response.data.success) {
      throw new Error(response.data.error || 'Không thể cập nhật sản phẩm');
    }
  },

  delete: async (id: number): Promise<void> => {
    const response = await api.delete<ApiResponse>(`/products/${id}`);
    if (!response.data.success) {
      throw new Error(response.data.error || 'Không thể xóa sản phẩm');
    }
  },

  search: async (query: string): Promise<Product[]> => {
    const response = await api.get<ApiResponse<Product[]>>(`/products/search?q=${encodeURIComponent(query)}`);
    return response.data.data || [];
  },
};

// Orders API
export const ordersAPI = {
  getAll: async (params?: { page?: number; limit?: number; status?: string }): Promise<Order[]> => {
    const response = await api.get<ApiResponse<Order[]>>('/orders', { params });
    return response.data.data || [];
  },

  getById: async (id: number): Promise<Order> => {
    const response = await api.get<ApiResponse<Order>>(`/orders/${id}`);
    if (!response.data.success || !response.data.data) {
      throw new Error('Không tìm thấy đơn hàng');
    }
    return response.data.data;
  },

  create: async (order: CreateOrderRequest): Promise<{ order_number: string; total_amount: number }> => {
    const response = await api.post<ApiResponse<{ order_number: string; total_amount: number }>>('/orders', order);
    if (!response.data.success) {
      throw new Error(response.data.error || 'Không thể tạo đơn hàng');
    }
    return response.data.data!;
  },

  updateStatus: async (id: number, status: string): Promise<void> => {
    const response = await api.patch<ApiResponse>(`/orders/${id}/status`, { status });
    if (!response.data.success) {
      throw new Error(response.data.error || 'Không thể cập nhật trạng thái đơn hàng');
    }
  },
};

// Categories API
export const categoriesAPI = {
  getAll: async (): Promise<Category[]> => {
    const response = await api.get<ApiResponse<Category[]>>('/categories');
    return response.data.data || [];
  },

  create: async (category: CreateCategoryRequest): Promise<{ id: number }> => {
    const response = await api.post<ApiResponse<{ id: number }>>('/categories', category);
    if (!response.data.success) {
      throw new Error(response.data.error || 'Không thể tạo danh mục');
    }
    return response.data.data!;
  },
};

// Analytics API
export const analyticsAPI = {
  getDashboardStats: async (): Promise<DashboardStats> => {
    const response = await api.get<ApiResponse<DashboardStats>>('/analytics/dashboard');
    return response.data.data || {
      totalRevenue: 0,
      totalOrders: 0,
      totalProducts: 0,
      totalCustomers: 0,
      revenueGrowth: 0,
      ordersGrowth: 0,
    };
  },

  getSalesChart: async (period: 'day' | 'week' | 'month' | 'year' = 'month'): Promise<SalesChartData[]> => {
    const response = await api.get<ApiResponse<SalesChartData[]>>(`/analytics/sales-chart?period=${period}`);
    return response.data.data || [];
  },

  getTopProducts: async (limit: number = 10): Promise<TopProduct[]> => {
    const response = await api.get<ApiResponse<TopProduct[]>>(`/analytics/top-products?limit=${limit}`);
    return response.data.data || [];
  },
};

// Upload API
export const uploadAPI = {
  uploadFile: async (file: File): Promise<{ url: string; key: string }> => {
    const formData = new FormData();
    formData.append('file', file);

    const response = await api.post<ApiResponse<{ url: string; key: string }>>('/upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });

    if (!response.data.success) {
      throw new Error(response.data.error || 'Không thể tải file lên');
    }

    return response.data.data!;
  },
};

// Types
export interface Product {
  id: number;
  name: string;
  description?: string;
  price: number;
  cost_price?: number;
  stock: number;
  min_stock: number;
  barcode?: string;
  category_id?: number;
  image_url?: string;
  active: boolean;
  created_at: string;
  updated_at: string;
}

export interface CreateProductRequest {
  name: string;
  description?: string;
  price: number;
  cost_price?: number;
  stock: number;
  min_stock?: number;
  barcode?: string;
  category_id?: number;
  image_url?: string;
}

export interface UpdateProductRequest extends Partial<CreateProductRequest> {}

export interface Order {
  id: number;
  order_number: string;
  user_id: number;
  customer_id?: number;
  subtotal: number;
  tax_amount: number;
  discount_amount: number;
  total_amount: number;
  payment_method: string;
  payment_status: string;
  status: string;
  notes?: string;
  receipt_url?: string;
  created_at: string;
  completed_at?: string;
  items: OrderItem[];
}

export interface OrderItem {
  id: number;
  order_id: number;
  product_id: number;
  quantity: number;
  unit_price: number;
  total_price: number;
  product_name?: string;
}

export interface CreateOrderRequest {
  customer_id?: number;
  items: {
    product_id: number;
    quantity: number;
    unit_price: number;
  }[];
  payment_method: 'cash' | 'card' | 'vnpay' | 'momo' | 'zalopay';
  discount_amount?: number;
  notes?: string;
}

export interface Category {
  id: number;
  name: string;
  description?: string;
  image_url?: string;
  active: boolean;
  created_at: string;
}

export interface CreateCategoryRequest {
  name: string;
  description?: string;
  image_url?: string;
}

export interface DashboardStats {
  totalRevenue: number;
  totalOrders: number;
  totalProducts: number;
  totalCustomers: number;
  revenueGrowth: number;
  ordersGrowth: number;
}

export interface SalesChartData {
  date: string;
  revenue: number;
  orders: number;
}

export interface TopProduct {
  id: number;
  name: string;
  total_sold: number;
  total_revenue: number;
}

export default api;

# ===================================================================
# 📁 FILE: .gitignore
# ===================================================================

# Dependencies
node_modules/
.pnp
.pnp.js

# Production builds
/build
/dist
/.next/
/out/

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.*.local

# Cloudflare
.wrangler/
wrangler.toml.bak
.dev.vars

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov
.nyc_output

# IDEs and editors
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
.idea
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
*.tmp
*.temp
.temp/

# Database
*.sqlite
*.sqlite3
*.db

# Cache
.cache/
.parcel-cache/
.eslintcache

# Terraform
*.tfstate
*.tfstate.*
.terraform/

# PWA
sw.js*
workbox-*.js

# Test results
test-results/
playwright-report/
blob-report/

# Package manager
package-lock.json
yarn.lock
pnpm-lock.yaml

# TypeScript
*.tsbuildinfo

# Vite
dist-ssr
*.local

# ===================================================================
# 📁 FILE: README.md
# ===================================================================

# 🏪 KhoAugment POS - Hệ thống Point of Sale Việt Nam

![KhoAugment POS](https://img.shields.io/badge/KhoAugment-POS-blue)
![Cloudflare](https://img.shields.io/badge/Cloudflare-Workers-orange)
![React](https://img.shields.io/badge/React-18-blue)
![TypeScript](https://img.shields.io/badge/TypeScript-5-blue)
![License](https://img.shields.io/badge/License-MIT-green)

Hệ thống Point of Sale (POS) chuyên nghiệp được thiết kế đặc biệt cho thị trường Việt Nam, triển khai 100% trên Cloudflare free tier.

## ✨ Tính năng chính

### 🏪 Bán hàng (POS Terminal)
- ✅ Giao diện bán hàng tối ưu cho mobile và desktop
- ✅ Quét mã vạch sản phẩm
- ✅ Quản lý giỏ hàng thời gian thực
- ✅ Hỗ trợ nhiều phương thức thanh toán
- ✅ In hóa đơn tự động
- ✅ Hoạt động offline với PWA

### 💰 Thanh toán Việt Nam
- ✅ Tiền mặt (Cash)
- ✅ Thẻ tín dụng/ghi nợ
- ✅ VNPay
- ✅ MoMo
- ✅ ZaloPay

### 📦 Quản lý sản phẩm
- ✅ Thêm/sửa/xóa sản phẩm
- ✅ Quản lý danh mục
- ✅ Theo dõi tồn kho thời gian thực
- ✅ Cảnh báo hết hàng
- ✅ Upload hình ảnh sản phẩm

### 📊 Báo cáo & Phân tích
- ✅ Dashboard admin với KPI
- ✅ Báo cáo doanh thu theo thời gian
- ✅ Top sản phẩm bán chạy
- ✅ Phân tích khách hàng
- ✅ Xuất báo cáo Excel/PDF

### 👥 Quản lý người dùng
- ✅ Phân quyền theo vai trò (Admin, Thu ngân, Nhân viên)
- ✅ Xác thực JWT bảo mật
- ✅ Theo dõi hoạt động người dùng
- ✅ Quản lý ca làm việc

### 🌐 PWA & Offline
- ✅ Cài đặt như ứng dụng native
- ✅ Hoạt động offline hoàn toàn
- ✅ Đồng bộ dữ liệu tự động
- ✅ Thông báo push

## 🏗️ Kiến trúc hệ thống

### Frontend (Cloudflare Pages)
- **React 18** với TypeScript
- **Vite** build tool
- **Ant Design** UI components
- **Recharts** data visualization
- **PWA** với service worker

### Backend (Cloudflare Workers)
- **Hono.js** framework
- **D1 Database** (SQLite)
- **R2 Storage** cho files
- **JWT Authentication**
- **Rate limiting** với KV store

### Database (Cloudflare D1)
- SQLite compatible
- Proper indexing
- ACID transactions
- Real-time inventory tracking

## 🚀 Cài đặt và triển khai

### Yêu cầu hệ thống
- Node.js 18+
- npm hoặc yarn
- Wrangler CLI
- Tài khoản Cloudflare (miễn phí)

### 1. Clone repository
```bash
git clone https://github.com/your-username/khoaugment-pos.git
cd khoaugment-pos
```

### 2. Cài đặt dependencies
```bash
# Install root dependencies
npm install

# Install all workspace dependencies
npm run install:all
```

### 3. Setup Cloudflare
```bash
# Login to Cloudflare
wrangler login

# Create D1 database
wrangler d1 create khoaugment-db

# Create R2 bucket
wrangler r2 bucket create khoaugment-assets

# Update wrangler.toml với database ID
```

### 4. Database setup
```bash
# Apply migrations
npm run db:migrate

# Seed sample data
npm run db:seed
```

### 5. Environment configuration
```bash
# Backend secrets
wrangler secret put JWT_SECRET
wrangler secret put ENCRYPTION_KEY

# Frontend environment
cp frontend/.env.example frontend/.env.local
# Edit với API URLs
```

### 6. Development
```bash
# Start all services
npm run dev

# Hoặc riêng biệt:
npm run dev:frontend  # Port 5173
npm run dev:backend   # Port 8787
```

### 7. Production deployment
```bash
# Deploy backend
npm run deploy:backend

# Deploy frontend  
npm run deploy:frontend

# Hoặc deploy tất cả
npm run deploy
```

## 📱 Hướng dẫn sử dụng

### Đăng nhập
- **Admin**: admin@khoaugment.com / admin123
- **Thu ngân**: cashier@khoaugment.com / admin123
- **Nhân viên**: staff@khoaugment.com / admin123

### Bán hàng (POS)
1. Truy cập `/pos`
2. Chọn sản phẩm hoặc quét mã vạch
3. Điều chỉnh số lượng trong giỏ hàng
4. Chọn phương thức thanh toán
5. Hoàn thành đơn hàng và in hóa đơn

### Quản lý sản phẩm
1. Truy cập `/admin/products`
2. Thêm sản phẩm mới với thông tin đầy đủ
3. Upload hình ảnh sản phẩm
4. Theo dõi tồn kho và cảnh báo

### Xem báo cáo
1. Truy cập `/admin/dashboard`
2. Xem KPI tổng quan
3. Phân tích doanh thu theo biểu đồ
4. Xuất báo cáo chi tiết

## 🛠️ Development

### Project structure
```
khoaugment-pos/
├── frontend/              # React TypeScript app
│   ├── src/
│   │   ├── components/    # Reusable components
│   │   ├── pages/         # Page components
│   │   ├── services/      # API services
│   │   ├── stores/        # State management
│   │   └── utils/         # Utilities
├── backend/               # Cloudflare Workers
│   ├── src/              # Workers source code
│   ├── migrations/       # D1 migrations
│   └── schema.sql        # Database schema
├── shared/               # Shared types and utils
└── docs/                # Documentation
```

### Testing
```bash
# Frontend tests
npm run test:frontend

# E2E tests
npm run test:e2e

# All tests
npm run test
```

### Code quality
```bash
# Linting
npm run lint

# Formatting
npm run format

# Type checking
npm run type-check
```

## 📊 Performance

- **Bundle size**: < 1MB gzipped
- **First load**: < 3 seconds
- **Database queries**: < 100ms average
- **API response**: < 200ms average
- **Offline support**: 100% functionality

## 🔒 Security

- JWT authentication với refresh tokens
- Role-based access control (RBAC)
- Input validation với Zod schemas
- Rate limiting (100 requests/hour)
- SQL injection prevention
- XSS protection
- CORS configuration

## 💰 Chi phí vận hành

**100% MIỄN PHÍ** với Cloudflare free tier:
- **Workers**: 100,000 requests/day
- **D1 Database**: 5GB storage, 25M row reads/day
- **R2 Storage**: 10GB storage, 1M requests/month
- **Pages**: Unlimited static hosting
- **CDN**: Global edge caching

## 🤝 Đóng góp

1. Fork repository
2. Tạo feature branch (`git checkout -b feature/amazing-feature`)
3. Commit changes (`git commit -m 'Add amazing feature'`)
4. Push branch (`git push origin feature/amazing-feature`)
5. Tạo Pull Request

## 📄 License

Dự án được phân phối dưới [MIT License](LICENSE).

## 📞 Hỗ trợ

- **Email**: support@khoaugment.com
- **GitHub Issues**: [Create Issue](https://github.com/your-username/khoaugment-pos/issues)
- **Documentation**: [Wiki](https://github.com/your-username/khoaugment-pos/wiki)

## 🎯 Roadmap

- [ ] **Q1 2024**: Mobile app (React Native)
- [ ] **Q2 2024**: Advanced analytics & AI insights
- [ ] **Q3 2024**: Multi-store management
- [ ] **Q4 2024**: Integration với các sàn TMDT Việt Nam

---

**Được phát triển với ❤️ cho thị trường Việt Nam**

# ===================================================================
# 📁 FILE: DEPLOYMENT_GUIDE.md
# ===================================================================

# 🚀 HƯỚNG DẪN TRIỂN KHAI KHOAUGMENT POS

## 📋 Checklist trước khi triển khai

### ✅ 1. Yêu cầu hệ thống
- [ ] Node.js 18+ installed
- [ ] npm hoặc yarn package manager
- [ ] Git installed
- [ ] Tài khoản Cloudflare (miễn phí)
- [ ] Wrangler CLI installed globally

### ✅ 2. Tài khoản Cloudflare
- [ ] Đăng ký tại https://dash.cloudflare.com
- [ ] Xác thực email
- [ ] Lấy API token từ dashboard

## 🏗️ SETUP PROJECT

### Bước 1: Khởi tạo project
```bash
# Clone repository
git clone https://github.com/your-username/khoaugment-pos.git
cd khoaugment-pos

# Install Wrangler CLI globally
npm install -g wrangler

# Login to Cloudflare
wrangler login
```

### Bước 2: Cài đặt dependencies
```bash
# Install root dependencies
npm install

# Install workspace dependencies
npm run install:all
```

## ☁️ CLOUDFLARE RESOURCES SETUP

### Bước 3: Tạo Cloudflare D1 Database
```bash
# Create D1 database
wrangler d1 create khoaugment-db

# Output sẽ cho bạn database_id, copy vào wrangler.toml
# [[d1_databases]]
# binding = "DB"
# database_name = "khoaugment-db"
# database_id = "YOUR_DATABASE_ID_HERE"
```

### Bước 4: Tạo Cloudflare R2 Bucket
```bash
# Create R2 bucket for file storage
wrangler r2 bucket create khoaugment-assets

# Create preview bucket
wrangler r2 bucket create khoaugment-assets-preview
```

### Bước 5: Tạo KV Namespace (cho rate limiting)
```bash
# Create KV namespace
wrangler kv:namespace create "CACHE"
wrangler kv:namespace create "CACHE" --preview

# Copy IDs vào wrangler.toml
```

### Bước 6: Cập nhật wrangler.toml
```toml
# backend/wrangler.toml
name = "khoaugment-backend"
main = "src/index.js"
compatibility_date = "2024-07-01"

[[d1_databases]]
binding = "DB"
database_name = "khoaugment-db"
database_id = "YOUR_ACTUAL_DATABASE_ID"

[[r2_buckets]]
binding = "BUCKET"
bucket_name = "khoaugment-assets"

[[kv_namespaces]]
binding = "CACHE"
id = "YOUR_KV_ID"
preview_id = "YOUR_KV_PREVIEW_ID"
```

## 🗄️ DATABASE SETUP

### Bước 7: Apply database migrations
```bash
cd backend

# Apply migrations locally for testing
wrangler d1 migrations apply khoaugment-db --local

# Apply migrations to production
wrangler d1 migrations apply khoaugment-db
```

### Bước 8: Seed initial data
```bash
# Seed local database
wrangler d1 execute khoaugment-db --local --file=seed.sql

# Seed production database
wrangler d1 execute khoaugment-db --file=seed.sql
```

### Bước 9: Verify database
```bash
# Check tables
wrangler d1 execute khoaugment-db --command="SELECT name FROM sqlite_master WHERE type='table';"

# Check sample data
wrangler d1 execute khoaugment-db --command="SELECT * FROM users LIMIT 3;"
```

## 🔑 ENVIRONMENT & SECRETS

### Bước 10: Backend secrets
```bash
cd backend

# Set JWT secret (generate strong password)
wrangler secret put JWT_SECRET
# Enter: your-super-secure-jwt-secret-key-here

# Set encryption key
wrangler secret put ENCRYPTION_KEY
# Enter: your-32-character-encryption-key

# Set payment gateway secrets (nếu sử dụng)
wrangler secret put VNPAY_SECRET_KEY
wrangler secret put MOMO_SECRET_KEY
wrangler secret put ZALOPAY_SECRET_KEY
```

### Bước 11: Frontend environment
```bash
cd frontend

# Create environment file
cp .env.example .env.local

# Edit .env.local
cat > .env.local << 'EOF'
VITE_API_URL=https://khoaugment-backend.your-subdomain.workers.dev/api
VITE_APP_NAME=KhoAugment POS
VITE_APP_VERSION=1.0.0
VITE_R2_PUBLIC_URL=https://khoaugment-assets.r2.dev
EOF
```

## 🧪 LOCAL TESTING

### Bước 12: Test local development
```bash
# Start backend
cd backend
wrangler dev --port 8787

# In new terminal, start frontend
cd frontend
npm run dev

# Test in browser
# Frontend: http://localhost:5173
# Backend: http://localhost:8787
```

### Bước 13: Test API endpoints
```bash
# Health check
curl http://localhost:8787/

# Test products endpoint
curl http://localhost:8787/api/products

# Test with authentication (sau khi login)
curl -H "Authorization: Bearer YOUR_TOKEN" http://localhost:8787/api/orders
```

## 🚀 PRODUCTION DEPLOYMENT

### Bước 14: Deploy backend (Workers)
```bash
cd backend

# Deploy to production
wrangler deploy

# Check deployment
wrangler tail
```

### Bước 15: Deploy frontend (Pages)
```bash
cd frontend

# Build for production
npm run build

# Deploy to Cloudflare Pages
wrangler pages deploy dist --project-name=khoaugment-frontend

# Set custom domain (optional)
wrangler pages domain add khoaugment-frontend your-domain.com
```

### Bước 16: Verify production deployment
```bash
# Test backend health
curl https://khoaugment-backend.your-subdomain.workers.dev/

# Test frontend
curl https://khoaugment-frontend.pages.dev/

# Test full flow
open https://khoaugment-frontend.pages.dev/
```

## 🔧 POST-DEPLOYMENT CONFIGURATION

### Bước 17: Configure custom domains
```bash
# Add custom domain to Pages
wrangler pages domain add khoaugment-frontend yourdomain.com

# Add custom domain to Workers (paid plan required)
# Or use the default *.workers.dev subdomain
```

### Bước 18: Setup monitoring
```bash
# Enable Cloudflare Analytics in dashboard
# Setup error tracking
# Configure alerts for downtime
```

### Bước 19: Setup CI/CD (GitHub Actions)
```yaml
# .github/workflows/deploy.yml
name: Deploy KhoAugment POS

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Deploy backend
        run: cd backend && wrangler deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          
      - name: Deploy frontend
        run: cd frontend && npm run build && wrangler pages deploy dist
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
```

## ✅ PRODUCTION CHECKLIST

### Bước 20: Final verification
- [ ] Backend Workers deployed successfully
- [ ] Frontend Pages deployed successfully
- [ ] D1 database accessible with data
- [ ] R2 bucket accessible for file uploads
- [ ] Authentication working
- [ ] All API endpoints responding
- [ ] PWA installable on mobile
- [ ] Offline functionality working
- [ ] Performance metrics acceptable

### Bước 21: Performance optimization
```bash
# Check bundle sizes
cd frontend
npm run analyze

# Optimize images
# Enable Cloudflare optimizations in dashboard
# Setup proper caching headers
```

### Bước 22: Security hardening
```bash
# Enable Cloudflare WAF in dashboard
# Enable Bot Fight Mode
# Setup rate limiting rules
# Configure security headers
```

## 📊 MONITORING & MAINTENANCE

### Daily monitoring
- [ ] Check Cloudflare Analytics
- [ ] Monitor error rates
- [ ] Check free tier usage
- [ ] Verify backup procedures

### Weekly maintenance
- [ ] Review performance metrics
- [ ] Update dependencies
- [ ] Check security alerts
- [ ] Test disaster recovery

### Monthly tasks
- [ ] Review usage and costs
- [ ] Update documentation
- [ ] Plan feature updates
- [ ] Conduct security audit

## 🆘 TROUBLESHOOTING

### Common deployment issues

**1. Wrangler authentication failed**
```bash
wrangler logout
wrangler login
```

**2. Database migration failed**
```bash
# Check D1 console for errors
wrangler d1 execute khoaugment-db --command="PRAGMA table_info(users);"
```

**3. Frontend build failed**
```bash
# Clear cache and rebuild
rm -rf node_modules .next dist
npm install
npm run build
```

**4. CORS errors**
```bash
# Check backend CORS configuration
# Verify API_URL in frontend environment
```

**5. 429 Rate limit errors**
```bash
# Check KV namespace configuration
# Verify rate limiting middleware
```

### Emergency procedures

**1. Rollback deployment**
```bash
# Rollback Workers
wrangler rollback

# Rollback Pages
# Use Cloudflare dashboard to revert to previous deployment
```

**2. Database recovery**
```bash
# Export current data
wrangler d1 execute khoaugment-db --command="SELECT * FROM users;" --output=json > backup.json

# Restore from backup
wrangler d1 execute khoaugment-db --file=restore.sql
```

## 🎯 OPTIMIZATION TIPS

### Performance
1. **Enable Cloudflare caching** for static assets
2. **Use R2 CDN** for image delivery
3. **Implement proper** cache headers
4. **Minimize API calls** with efficient queries
5. **Use service worker** for offline caching

### Cost optimization
1. **Monitor free tier usage** daily
2. **Optimize image sizes** before upload
3. **Use efficient database queries**
4. **Implement proper caching**
5. **Clean up unused resources**

### Security
1. **Regular security updates**
2. **Monitor access logs**
3. **Use strong secrets**
4. **Enable 2FA on Cloudflare**
5. **Regular backup procedures**

---

**🎉 Chúc mừng! KhoAugment POS đã sẵn sàng phục vụ khách hàng! 🚀**

# ===================================================================
# HƯỚNG DẪN SỬ DỤNG FILE MASTER
# ===================================================================

## 📋 CÁCH SPLIT THÀNH CÁC FILE RIÊNG BIỆT

### 1. Copy toàn bộ nội dung file này
### 2. Tạo từng file theo đường dẫn được chỉ định
### 3. Copy nội dung tương ứng vào từng file

## 📁 ĐƯỜNG DẪN CÁC FILE:

### Root level files:
- `.cursorrules` (trong thư mục gốc)
- `package.json` (trong thư mục gốc)
- `.gitignore` (trong thư mục gốc)
- `README.md` (trong thư mục gốc)
- `DEPLOYMENT_GUIDE.md` (trong thư mục gốc)

### .vscode directory:
- `.vscode/settings.json`
- `.vscode/extensions.json`
- `.vscode/tasks.json`

### Backend files:
- `backend/wrangler.toml`
- `backend/package.json`
- `backend/src/index.js`
- `backend/schema.sql`
- `backend/seed.sql`

### Frontend files:
- `frontend/package.json`
- `frontend/vite.config.ts`
- `frontend/src/main.tsx`
- `frontend/src/App.tsx`
- `frontend/src/services/api.ts`

## 🚀 SETUP NHANH:

1. **Tạo project structure:**
```bash
mkdir khoaugment-pos
cd khoaugment-pos
mkdir -p {frontend,backend,shared,docs}/.vscode
mkdir -p frontend/src/{components,pages,services,stores,utils,assets}
mkdir -p backend/{src,migrations}
```

2. **Copy các file từ master file này vào đúng vị trí**

3. **Install dependencies:**
```bash
npm install
cd frontend && npm install
cd ../backend && npm install
```

4. **Setup Cloudflare:**
```bash
wrangler login
wrangler d1 create khoaugment-db
wrangler r2 bucket create khoaugment-assets
```

5. **Deploy:**
```bash
npm run deploy
```

## 📞 SUPPORT:
- Nếu gặp vấn đề, check DEPLOYMENT_GUIDE.md
- Tất cả đã được tối ưu 100% cho Cloudflare free tier
- Zero cost deployment với đầy đủ tính năng production

**🎯 Hệ thống hoàn chỉnh cho POS Việt Nam trên Cloudflare! 🚀**