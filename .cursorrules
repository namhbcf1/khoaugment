# KhoAugment POS System - Cloudflare Optimized Cursor Rules

## ðŸŽ¯ PROJECT CONTEXT
You are working on KhoAugment, a comprehensive Point of Sale (POS) system built with Cloudflare's free tier:
- Frontend: React 18 + Vite + Ant Design + TypeScript (deployed to Cloudflare Pages)
- Backend: Cloudflare Workers + Hono.js framework
- Database: Cloudflare D1 (SQLite)
- Storage: Cloudflare R2 (Object Storage)
- CDN: Cloudflare CDN with edge caching
- Analytics: Cloudflare Web Analytics
- Security: Cloudflare WAF + Bot Protection

## ðŸš« ABSOLUTE PROHIBITIONS
- NEVER create mock data, demo data, or placeholder content
- NEVER use Node.js specific APIs in Workers (use Web APIs only)
- NEVER exceed Cloudflare free tier limits (100k requests/day, 10GB storage)
- NEVER use local filesystem storage (use R2 instead)
- NEVER create long-running processes (30-second Workers limit)
- NEVER use heavy computations that exceed CPU limits
- NEVER ignore edge computing constraints
- NEVER use non-SQLite SQL syntax for D1

## âœ… CLOUDFLARE REQUIREMENTS

### Workers Backend Standards
```javascript
import { Hono } from 'hono';
import { cors } from 'hono/cors';
import { jwt } from 'hono/jwt';

const app = new Hono();

// Middleware
app.use('*', cors());
app.use('/api/*', jwt({ secret: 'your-secret' }));

// Environment binding types
interface Env {
  DB: D1Database;
  BUCKET: R2Bucket;
  JWT_SECRET: string;
  API_KEY: string;
}

// API endpoint with proper error handling
app.get('/api/products', async (c) => {
  try {
    const { results } = await c.env.DB.prepare(
      'SELECT * FROM products WHERE active = 1'
    ).all();
    
    return c.json({ success: true, data: results });
  } catch (error) {
    return c.json({ success: false, error: error.message }, 500);
  }
});

export default app;
```
