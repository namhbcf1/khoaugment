import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { 
  Form, 
  Input, 
  Button, 
  Card, 
  Typography, 
  Row, 
  Col, 
  Select, 
  Checkbox, 
  Divider, 
  Alert, 
  Space,
  message 
} from 'antd';
import { 
  UserOutlined, 
  LockOutlined, 
  MailOutlined, 
  PhoneOutlined, 
  SafetyOutlined,
  EyeInvisibleOutlined,
  EyeTwoTone 
} from '@ant-design/icons';

const { Title, Text, Paragraph } = Typography;
const { Option } = Select;

/**
 * Trang ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi
 */
const Register = () => {
  const [form] = Form.useForm();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // X√°c th·ª±c m·∫≠t kh·∫©u tr√πng kh·ªõp
  const validateConfirmPassword = (_, value) => {
    const password = form.getFieldValue('password');
    if (!value || password === value) {
      return Promise.resolve();
    }
    return Promise.reject(new Error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!'));
  };

  // X·ª≠ l√Ω ƒëƒÉng k√Ω
  const handleRegister = async (values) => {
    setLoading(true);
    setError('');
    
    try {
      // Gi·∫£ l·∫≠p API call
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      console.log('ƒêƒÉng k√Ω v·ªõi th√¥ng tin:', values);
      
      // Gi·∫£ l·∫≠p ƒëƒÉng k√Ω th√†nh c√¥ng
      message.success('ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n.');
      navigate('/login');
    } catch (err) {
      console.error('ƒêƒÉng k√Ω th·∫•t b·∫°i:', err);
      setError('ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: '#f0f2f5', 
      padding: '40px 0',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center' 
    }}>
      <Row justify="center" style={{ width: '100%' }}>
        <Col xs={23} sm={20} md={16} lg={10} xl={8}>
          <Card
            bordered={false}
            style={{ 
              boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',
              borderRadius: '8px'
            }}
          >
            <div style={{ textAlign: 'center', marginBottom: '24px' }}>
              <Title level={2}>üñ•Ô∏è Tr∆∞·ªùng Ph√°t Computer</Title>
              <Paragraph type="secondary">
                T·∫°o t√†i kho·∫£n m·ªõi
              </Paragraph>
            </div>

            {error && (
              <Alert
                message="L·ªói ƒëƒÉng k√Ω"
                description={error}
                type="error"
                showIcon
                style={{ marginBottom: '24px' }}
                closable
              />
            )}

            <Form
              form={form}
              name="register"
              layout="vertical"
              onFinish={handleRegister}
              scrollToFirstError
              initialValues={{
                role: 'customer',
                agreement: false,
              }}
            >
              <Row gutter={16}>
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="firstName"
                    label="H·ªç"
                    rules={[
                      {
                        required: true,
                        message: 'Vui l√≤ng nh·∫≠p h·ªç!',
                      },
                    ]}
                  >
                    <Input prefix={<UserOutlined />} placeholder="Nguy·ªÖn" />
                  </Form.Item>
                </Col>
                
                <Col xs={24} sm={12}>
                  <Form.Item
                    name="lastName"
                    label="T√™n"
                    rules={[
                      {
                        required: true,
                        message: 'Vui l√≤ng nh·∫≠p t√™n!',
                      },
                    ]}
                  >
                    <Input prefix={<UserOutlined />} placeholder="VƒÉn A" />
                  </Form.Item>
                </Col>
              </Row>

              <Form.Item
                name="email"
                label="Email"
                rules={[
                  {
                    required: true,
                    message: 'Vui l√≤ng nh·∫≠p email!',
                  },
                  {
                    type: 'email',
                    message: 'Email kh√¥ng h·ª£p l·ªá!',
                  },
                ]}
              >
                <Input prefix={<MailOutlined />} placeholder="example@gmail.com" />
              </Form.Item>

              <Form.Item
                name="phone"
                label="S·ªë ƒëi·ªán tho·∫°i"
                rules={[
                  {
                    required: true,
                    message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!',
                  },
                  {
                    pattern: /^[0-9]{10,11}$/,
                    message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!',
                  },
                ]}
              >
                <Input prefix={<PhoneOutlined />} placeholder="0912345678" />
              </Form.Item>

              <Form.Item
                name="password"
                label="M·∫≠t kh·∫©u"
                rules={[
                  {
                    required: true,
                    message: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!',
                  },
                  {
                    min: 8,
                    message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±!',
                  },
                ]}
                hasFeedback
              >
                <Input.Password
                  prefix={<LockOutlined />}
                  placeholder="M·∫≠t kh·∫©u"
                  iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}
                />
              </Form.Item>

              <Form.Item
                name="confirmPassword"
                label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                dependencies={['password']}
                rules={[
                  {
                    required: true,
                    message: 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u!',
                  },
                  {
                    validator: validateConfirmPassword,
                  },
                ]}
                hasFeedback
              >
                <Input.Password
                  prefix={<LockOutlined />}
                  placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                  iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}
                />
              </Form.Item>

              <Form.Item
                name="role"
                label="Vai tr√≤"
              >
                <Select placeholder="Ch·ªçn vai tr√≤">
                  <Option value="customer">Kh√°ch h√†ng</Option>
                  <Option value="business">Doanh nghi·ªáp</Option>
                </Select>
              </Form.Item>

              <Form.Item
                name="agreement"
                valuePropName="checked"
                rules={[
                  {
                    validator: (_, value) =>
                      value ? Promise.resolve() : Promise.reject(new Error('Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n!')),
                  },
                ]}
              >
                <Checkbox>
                  T√¥i ƒë√£ ƒë·ªçc v√† ƒë·ªìng √Ω v·ªõi <Link to="/terms">ƒêi·ªÅu kho·∫£n d·ªãch v·ª•</Link> v√†{' '}
                  <Link to="/privacy">Ch√≠nh s√°ch b·∫£o m·∫≠t</Link>
                </Checkbox>
              </Form.Item>

              <Form.Item>
                <Button
                  type="primary"
                  htmlType="submit"
                  size="large"
                  block
                  icon={<SafetyOutlined />}
                  loading={loading}
                >
                  ƒêƒÉng k√Ω
                </Button>
              </Form.Item>

              <Divider>
                <Text type="secondary">ho·∫∑c</Text>
              </Divider>

              <div style={{ textAlign: 'center' }}>
                <Space>
                  <Text>ƒê√£ c√≥ t√†i kho·∫£n?</Text>
                  <Link to="/login">ƒêƒÉng nh·∫≠p ngay</Link>
                </Space>
              </div>
            </Form>
          </Card>

          <div style={{ textAlign: 'center', marginTop: '24px' }}>
            <Text type="secondary">
              ¬© {new Date().getFullYear()} Tr∆∞·ªùng Ph√°t Computer H√≤a B√¨nh
            </Text>
          </div>
        </Col>
      </Row>
    </div>
  );
};

export default Register; 